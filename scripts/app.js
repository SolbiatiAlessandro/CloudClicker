(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var game;

window.onload = function () {
  game = new Phaser.Game(800, 600, Phaser.AUTO, 'game');
  game.state.add('boot', _statesBootJs2["default"]);
  game.state.add('preload', _statesPreloadJs2["default"]);
  game.state.add('game', _statesGameJs2["default"]);
  game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0Nsb3VkQ2xpY2tlci9zcmMvYXBwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7NEJBRWlCLGtCQUFrQjs7OzsrQkFDZixxQkFBcUI7Ozs7NEJBQ3hCLGtCQUFrQjs7OztBQUpuQyxJQUFJLElBQUksQ0FBQzs7QUFPVCxNQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7QUFDMUIsTUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDdEQsTUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSw0QkFBTyxDQUFDO0FBQzdCLE1BQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsK0JBQVUsQ0FBQztBQUNuQyxNQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFPLENBQUM7QUFDN0IsTUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDMUIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9DbG91ZENsaWNrZXIvc3JjL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnYW1lO1xyXG5cclxuaW1wb3J0IEJvb3QgZnJvbSBcIi4vc3RhdGVzL0Jvb3QuanNcIjtcclxuaW1wb3J0IFByZWxvYWQgZnJvbSBcIi4vc3RhdGVzL1ByZWxvYWQuanNcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcclxuXHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gIGdhbWUgPSBuZXcgUGhhc2VyLkdhbWUoODAwLCA2MDAsIFBoYXNlci5BVVRPLCAnZ2FtZScpO1xyXG4gIGdhbWUuc3RhdGUuYWRkKCdib290JywgQm9vdCk7XHJcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3ByZWxvYWQnLCBQcmVsb2FkKTtcclxuICBnYW1lLnN0YXRlLmFkZCgnZ2FtZScsIEdhbWUpO1xyXG4gIGdhbWUuc3RhdGUuc3RhcnQoJ2Jvb3QnKTtcclxufTsiXX0=
},{"./states/Boot.js":2,"./states/Game.js":3,"./states/Preload.js":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
  function Boot() {
    _classCallCheck(this, Boot);
  }

  _createClass(Boot, [{
    key: 'preload',
    value: function preload() {
      this.load.image('preloader', 'assets/images/loading_bar.png');
    }
  }, {
    key: 'create',
    value: function create() {
      this.game.input.maxPointers = 1;
      this.game.state.start('preload');
    }
  }]);

  return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0Nsb3VkQ2xpY2tlci9zcmMvc3RhdGVzL0Jvb3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixJQUFJO1dBQUosSUFBSTswQkFBSixJQUFJOzs7ZUFBSixJQUFJOztXQUVoQixtQkFBRztBQUNSLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO0tBQy9EOzs7V0FFSyxrQkFBRztBQUNQLFVBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ2xDOzs7U0FUa0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQ2xvdWRDbGlja2VyL3NyYy9zdGF0ZXMvQm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb3Qge1xyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuICAgIHRoaXMuZ2FtZS5pbnB1dC5tYXhQb2ludGVycyA9IDE7XHJcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3ByZWxvYWQnKTtcclxuICB9XHJcblxyXG59Il19
},{}],3:[function(require,module,exports){
//require other components

"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Game = (function (_Phaser$State) {
	_inherits(Game, _Phaser$State);

	function Game() {
		_classCallCheck(this, Game);

		//object level properties
		_get(Object.getPrototypeOf(Game.prototype), "constructor", this).call(this);
	}

	_createClass(Game, [{
		key: "create",
		value: function create() {
			this.add.sprite(0, 0, "game_bg");
			this.clouds = this.add.group();
			this.score = 0;
			var style = { font: "24px Arial", fill: "#FFFFFF" };
			this.txtScore = this.add.text(10, 10, this.score.toString(), style);
		}
	}, {
		key: "update",
		value: function update() {
			if (Math.random() < 0.01) {
				var cloud = this.clouds.getFirstDead();
				if (cloud) {
					cloud.x = Math.random() * this.game.width;
					cloud.y = Math.random() * this.game.height;
					cloud.revive();
				} else {
					var cloud = this.clouds.create(Math.random() * this.game.width, Math.random() * this.game.height, "cloud");
					cloud.inputEnabled = true;
					cloud.events.onInputDown.add(this.onCloudClick, this);
				}

				cloud.alpha = 0;
				this.add.tween(cloud).to({ y: "-50", alpha: 1 }, 800, Phaser.Easing.Cubic.Out, true);
			}
		}
	}, {
		key: "onCloudClick",
		value: function onCloudClick(cloud) {
			cloud.kill();
			this.score++;
			this.txtScore.setText(this.score.toString());
		}
	}]);

	return Game;
})(Phaser.State);

exports["default"] = Game;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0Nsb3VkQ2xpY2tlci9zcmMvc3RhdGVzL0dhbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztJQUVxQixJQUFJO1dBQUosSUFBSTs7QUFFWixVQUZRLElBQUksR0FFVDt3QkFGSyxJQUFJOzs7QUFJckIsNkJBSmlCLElBQUksNkNBSWI7RUFDVDs7Y0FMa0IsSUFBSTs7U0FPakIsa0JBQUc7QUFDUixPQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE9BQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMvQixPQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNmLE9BQUksS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUM7QUFDcEQsT0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7R0FDcEU7OztTQUdLLGtCQUFHO0FBQ1IsT0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxFQUFDO0FBQ3ZCLFFBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDdkMsUUFBSSxLQUFLLEVBQUU7QUFDVixVQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMxQyxVQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUMzQyxVQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7S0FDZixNQUFNO0FBQ04sU0FBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQzdCLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFDL0IsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUNoQyxPQUFPLENBQ1AsQ0FBQztBQUNGLFVBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0FBQzFCLFVBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3REOztBQUVELFNBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLFFBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FDdkIsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFDdEIsR0FBRyxFQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFDdkIsSUFBSSxDQUNKLENBQUM7SUFDRjtHQUNEOzs7U0FFVyxzQkFBQyxLQUFLLEVBQUM7QUFDbEIsUUFBSyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2IsT0FBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2IsT0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0dBQzdDOzs7UUEvQ2tCLElBQUk7R0FBUyxNQUFNLENBQUMsS0FBSzs7cUJBQXpCLElBQUkiLCJmaWxlIjoiL1VzZXJzL2xlc3NhbmRyby9IYWNraW5nL0pTL0dBTUUvUEhBU0VSL2Jvb2stdHJhdmlzLWZhYXMvQ2xvdWRDbGlja2VyL3NyYy9zdGF0ZXMvR2FtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vcmVxdWlyZSBvdGhlciBjb21wb25lbnRzXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIGV4dGVuZHMgUGhhc2VyLlN0YXRlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAvL29iamVjdCBsZXZlbCBwcm9wZXJ0aWVzXHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG5cdCAgdGhpcy5hZGQuc3ByaXRlKDAsMCxcImdhbWVfYmdcIik7XHJcblx0ICB0aGlzLmNsb3VkcyA9IHRoaXMuYWRkLmdyb3VwKCk7XHJcblx0ICB0aGlzLnNjb3JlID0gMDtcclxuXHQgIHZhciBzdHlsZSA9IHsgZm9udDogXCIyNHB4IEFyaWFsXCIsIGZpbGw6IFwiI0ZGRkZGRlwiIH07XHJcblx0ICB0aGlzLnR4dFNjb3JlID0gdGhpcy5hZGQudGV4dCgxMCwgMTAsIHRoaXMuc2NvcmUudG9TdHJpbmcoKSwgc3R5bGUpO1xyXG4gIH1cclxuXHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuXHQgIGlmKE1hdGgucmFuZG9tKCkgPCAwLjAxKXtcclxuXHRcdCAgdmFyIGNsb3VkID0gdGhpcy5jbG91ZHMuZ2V0Rmlyc3REZWFkKCk7XHJcblx0XHQgIGlmIChjbG91ZCkge1xyXG5cdFx0XHQgIGNsb3VkLnggPSBNYXRoLnJhbmRvbSgpICogdGhpcy5nYW1lLndpZHRoO1xyXG5cdFx0XHQgIGNsb3VkLnkgPSBNYXRoLnJhbmRvbSgpICogdGhpcy5nYW1lLmhlaWdodDtcclxuXHRcdFx0ICBjbG91ZC5yZXZpdmUoKTtcclxuXHRcdCAgfSBlbHNlIHtcclxuXHRcdFx0ICB2YXIgY2xvdWQgPSB0aGlzLmNsb3Vkcy5jcmVhdGUoXHJcblx0XHRcdFx0ICBNYXRoLnJhbmRvbSgpICogdGhpcy5nYW1lLndpZHRoLFxyXG5cdFx0XHRcdCAgTWF0aC5yYW5kb20oKSAqIHRoaXMuZ2FtZS5oZWlnaHQsXHJcblx0XHRcdFx0ICBcImNsb3VkXCJcclxuXHRcdFx0ICApO1xyXG5cdFx0XHQgIGNsb3VkLmlucHV0RW5hYmxlZCA9IHRydWU7XHJcblx0XHRcdCAgY2xvdWQuZXZlbnRzLm9uSW5wdXREb3duLmFkZCh0aGlzLm9uQ2xvdWRDbGljaywgdGhpcyk7XHJcblx0XHQgIH1cclxuXHJcblx0XHQgIGNsb3VkLmFscGhhID0gMDtcclxuXHRcdCAgdGhpcy5hZGQudHdlZW4oY2xvdWQpLnRvKFxyXG5cdFx0XHQgIHsgeTogXCItNTBcIiwgYWxwaGE6IDEgfSwgXHJcblx0XHRcdCAgODAwLCBcclxuXHRcdFx0ICBQaGFzZXIuRWFzaW5nLkN1YmljLk91dCxcclxuXHRcdFx0ICB0cnVlXHJcblx0XHQgICk7XHJcblx0ICB9XHJcbiAgfVxyXG5cclxuICBvbkNsb3VkQ2xpY2soY2xvdWQpe1xyXG5cdCAgY2xvdWQua2lsbCgpO1xyXG5cdCAgdGhpcy5zY29yZSsrO1xyXG5cdCAgdGhpcy50eHRTY29yZS5zZXRUZXh0KHRoaXMuc2NvcmUudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIl19
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
  function Preload() {
    _classCallCheck(this, Preload);

    this.asset = null;
    this.ready = false;
  }

  _createClass(Preload, [{
    key: 'preload',
    value: function preload() {
      this.load.image('loading_bg', 'assets/images/loading_bg.jpg');
    }
  }, {
    key: 'create',
    value: function create() {

      //background for game
      this.add.sprite(0, 0, "loading_bg");

      this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
      this.asset.anchor.setTo(0.5, 0.5);

      this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
      this.load.setPreloadSprite(this.asset);

      //do all your loading here
      //this.load.image('player', 'assets/images/player.png'); //width and height of sprite
      this.load.image('cloud', 'assets/images/cloud.png');
      this.load.image('game_bg', 'assets/images/game_bg_2.png');

      //staaaart load
      this.load.start();
    }
  }, {
    key: 'update',
    value: function update() {

      if (this.ready) {
        this.game.state.start('game');
      }
    }
  }, {
    key: 'onLoadComplete',
    value: function onLoadComplete() {
      this.ready = true;
    }
  }]);

  return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sZXNzYW5kcm8vSGFja2luZy9KUy9HQU1FL1BIQVNFUi9ib29rLXRyYXZpcy1mYWFzL0Nsb3VkQ2xpY2tlci9zcmMvc3RhdGVzL1ByZWxvYWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixPQUFPO0FBRWYsV0FGUSxPQUFPLEdBRVo7MEJBRkssT0FBTzs7QUFHeEIsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbEIsUUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7R0FDcEI7O2VBTGtCLE9BQU87O1dBT25CLG1CQUFHO0FBQ1IsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLDhCQUE4QixDQUFDLENBQUM7S0FDL0Q7OztXQUVLLGtCQUFHOzs7QUFHUCxVQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDOztBQUVuQyxVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEYsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFbEMsVUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7QUFJMUMsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLHlCQUF5QixDQUFDLENBQUM7QUFDcEQsVUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLDZCQUE2QixDQUFDLENBQUM7OztBQUl2RCxVQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ25COzs7V0FFSyxrQkFBRzs7QUFFUCxVQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7QUFDYixZQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7T0FDL0I7S0FFRjs7O1dBRWEsMEJBQUc7QUFDZixVQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztLQUNuQjs7O1NBMUNrQixPQUFPOzs7cUJBQVAsT0FBTyIsImZpbGUiOiIvVXNlcnMvbGVzc2FuZHJvL0hhY2tpbmcvSlMvR0FNRS9QSEFTRVIvYm9vay10cmF2aXMtZmFhcy9DbG91ZENsaWNrZXIvc3JjL3N0YXRlcy9QcmVsb2FkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5hc3NldCA9IG51bGw7XHJcbiAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwcmVsb2FkKCkge1xyXG4gICAgdGhpcy5sb2FkLmltYWdlKCdsb2FkaW5nX2JnJywgJ2Fzc2V0cy9pbWFnZXMvbG9hZGluZ19iZy5qcGcnKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZSgpIHtcclxuXHJcbiAgICAvL2JhY2tncm91bmQgZm9yIGdhbWVcclxuICAgIHRoaXMuYWRkLnNwcml0ZSgwLDAsIFwibG9hZGluZ19iZ1wiKTtcclxuXHJcbiAgICB0aGlzLmFzc2V0ID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aC8yLHRoaXMuZ2FtZS5oZWlnaHQvMiwgJ3ByZWxvYWRlcicpO1xyXG4gICAgdGhpcy5hc3NldC5hbmNob3Iuc2V0VG8oMC41LCAwLjUpO1xyXG5cclxuICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xyXG4gICAgdGhpcy5sb2FkLnNldFByZWxvYWRTcHJpdGUodGhpcy5hc3NldCk7XHJcblxyXG4gICAgLy9kbyBhbGwgeW91ciBsb2FkaW5nIGhlcmVcclxuICAgIC8vdGhpcy5sb2FkLmltYWdlKCdwbGF5ZXInLCAnYXNzZXRzL2ltYWdlcy9wbGF5ZXIucG5nJyk7IC8vd2lkdGggYW5kIGhlaWdodCBvZiBzcHJpdGVcclxuXHR0aGlzLmxvYWQuaW1hZ2UoJ2Nsb3VkJywgJ2Fzc2V0cy9pbWFnZXMvY2xvdWQucG5nJyk7XHJcblx0dGhpcy5sb2FkLmltYWdlKCdnYW1lX2JnJywgJ2Fzc2V0cy9pbWFnZXMvZ2FtZV9iZ18yLnBuZycpO1xyXG5cclxuXHJcbiAgICAvL3N0YWFhYXJ0IGxvYWRcclxuICAgIHRoaXMubG9hZC5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG5cclxuICAgIGlmKHRoaXMucmVhZHkpIHtcclxuICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdnYW1lJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgb25Mb2FkQ29tcGxldGUoKSB7XHJcbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
